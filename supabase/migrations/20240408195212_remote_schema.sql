
SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;

CREATE EXTENSION IF NOT EXISTS "pgsodium" WITH SCHEMA "pgsodium";

COMMENT ON SCHEMA "public" IS 'standard public schema';

CREATE EXTENSION IF NOT EXISTS "pg_graphql" WITH SCHEMA "graphql";

CREATE EXTENSION IF NOT EXISTS "pg_stat_statements" WITH SCHEMA "extensions";

CREATE EXTENSION IF NOT EXISTS "pgcrypto" WITH SCHEMA "extensions";

CREATE EXTENSION IF NOT EXISTS "pgjwt" WITH SCHEMA "extensions";

CREATE EXTENSION IF NOT EXISTS "supabase_vault" WITH SCHEMA "vault";

CREATE EXTENSION IF NOT EXISTS "uuid-ossp" WITH SCHEMA "extensions";

SET default_tablespace = '';

SET default_table_access_method = "heap";

CREATE TABLE IF NOT EXISTS "public"."release" (
    "id" "uuid" DEFAULT "gen_random_uuid"() NOT NULL,
    "createdAt" timestamp with time zone DEFAULT "now"() NOT NULL,
    "title" character varying NOT NULL,
    "lastWatchedEpisode" bigint DEFAULT '0'::bigint NOT NULL,
    "latestEpisode" bigint DEFAULT '0'::bigint NOT NULL,
    "userId" "uuid" DEFAULT "auth"."uid"(),
    "nyaaSourceUrl" character varying NOT NULL,
    "aniwaveSourceUrl" character varying NOT NULL,
    "nyaaUrlForFirstUnwatchedEpisode" character varying,
    "aniwaveUrlForFirstUnwatchedEpisode" character varying
);

ALTER TABLE "public"."release" OWNER TO "postgres";

CREATE TABLE IF NOT EXISTS "public"."watchHistory" (
    "id" bigint NOT NULL,
    "createdAt" timestamp with time zone DEFAULT "now"() NOT NULL,
    "episodeNumber" bigint NOT NULL,
    "episodeUrl" character varying NOT NULL,
    "seasonNumber" bigint DEFAULT '1'::bigint NOT NULL,
    "releaseId" "uuid",
    "userId" "uuid" DEFAULT "auth"."uid"() NOT NULL
);

ALTER TABLE "public"."watchHistory" OWNER TO "postgres";

ALTER TABLE "public"."watchHistory" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."watchHistory_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

ALTER TABLE ONLY "public"."release"
    ADD CONSTRAINT "release_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."watchHistory"
    ADD CONSTRAINT "watchHistory_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."watchHistory"
    ADD CONSTRAINT "public_watchHistory_releaseId_fkey" FOREIGN KEY ("releaseId") REFERENCES "public"."release"("id");

ALTER TABLE "public"."release" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."watchHistory" ENABLE ROW LEVEL SECURITY;

ALTER PUBLICATION "supabase_realtime" OWNER TO "postgres";

GRANT USAGE ON SCHEMA "public" TO "postgres";
GRANT USAGE ON SCHEMA "public" TO "anon";
GRANT USAGE ON SCHEMA "public" TO "authenticated";
GRANT USAGE ON SCHEMA "public" TO "service_role";

GRANT ALL ON TABLE "public"."release" TO "anon";
GRANT ALL ON TABLE "public"."release" TO "authenticated";
GRANT ALL ON TABLE "public"."release" TO "service_role";

GRANT ALL ON TABLE "public"."watchHistory" TO "anon";
GRANT ALL ON TABLE "public"."watchHistory" TO "authenticated";
GRANT ALL ON TABLE "public"."watchHistory" TO "service_role";

GRANT ALL ON SEQUENCE "public"."watchHistory_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."watchHistory_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."watchHistory_id_seq" TO "service_role";

ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "service_role";

ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "service_role";

ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "service_role";

RESET ALL;
